---
config:
  layout: fixed
---
flowchart TD
 subgraph APIEndpoints["API Endpoints"]
        PostSignup["/signup (POST)"]
        PutUpdateUser["/updateuser (PUT)"]
        GetByEmail["/getbyemail (GET)"]
        GetByUsername["/getbyusername (GET)"]
        DeleteByEmail["/deletebyemail (DELETE)"]
        GetAll["/getAll (GET)"]
        PutReset["/reset (PUT)"]
        GetByUserId["/{userId} (GET)"]
        PutByUserId["/{userId} (PUT)"]
        PutUserRole["/{userId}/role (PUT)"]
  end
 subgraph UserManagementService["User Management Service"]
        Controller["REST Controller"]
        Service["User Service"]
        Repository["User Repository"]
        KafkaConsumer["Kafka Consumer"]
        KafkaProducer["Kafka Producer"]
        APIEndpoints
  end
    Client["Client/User"] -- HTTP Requests --> APIGateway["API Gateway"]
    APIGateway -- Routes Requests --> UserManagementService
    Controller <--> Service
    Service <--> Repository & KafkaProducer
    KafkaConsumer --> Service
    PostSignup --> Controller
    PutUpdateUser --> Controller
    GetByEmail --> Controller
    GetByUsername --> Controller
    DeleteByEmail --> Controller
    GetAll --> Controller
    PutReset --> Controller
    GetByUserId --> Controller
    PutByUserId --> Controller
    PutUserRole --> Controller
    Database[("User Database")] <--> Repository
    KafkaCluster["Kafka Cluster"] -- Produces --> UserSignUpEvent["User SignUp Event"]
    UserSignUpEvent --> KafkaConsumer
    KafkaProducer -- Produces --> KafkaEvents["Kafka Events"]
    KafkaEvents --> KafkaCluster
    OtherMicroservices["Other Microservices"] <--> KafkaCluster & APIGateway
     PostSignup:::endpointStyle
     PutUpdateUser:::endpointStyle
     GetByEmail:::endpointStyle
     GetByUsername:::endpointStyle
     DeleteByEmail:::endpointStyle
     GetAll:::endpointStyle
     PutReset:::endpointStyle
     GetByUserId:::endpointStyle
     PutByUserId:::endpointStyle
     PutUserRole:::endpointStyle
     Controller:::controllerStyle
     Service:::serviceStyle
     Repository:::repositoryStyle
     KafkaConsumer:::kafkaStyle
     KafkaProducer:::kafkaStyle
     Client:::clientStyle
     APIGateway:::apiGatewayStyle
     Database:::databaseStyle
     KafkaCluster:::kafkaStyle
     UserSignUpEvent:::kafkaStyle
     KafkaEvents:::kafkaStyle
     OtherMicroservices:::otherMicroservicesStyle
    classDef clientStyle fill:#fff,stroke:#0000ff,stroke-width:1px,stroke-dasharray: 0
    classDef apiGatewayStyle fill:#c5f7eb,stroke:#000,stroke-width:1px
    classDef serviceStyle fill:#c5e8f7,stroke:#333,stroke-width:1px
    classDef controllerStyle fill:#a7e3a5,stroke:#333,stroke-width:1px
    classDef repositoryStyle fill:#e2caf8,stroke:#333,stroke-width:1px
    classDef databaseStyle fill:#f8c8c4,stroke:#333,stroke-width:1px
    classDef kafkaStyle fill:#f9c270,stroke:#333,stroke-width:1px
    classDef endpointStyle fill:#f7f7c5,stroke:#333,stroke-width:1px
    classDef otherMicroservicesStyle fill:#f7f7c5,stroke:#000,stroke-width:1px
    linkStyle 1 stroke:#000,stroke-width:1px,stroke-dasharray: 5 5,fill:none
    linkStyle 13 stroke:#000,stroke-width:1px,stroke-dasharray: 5 5,fill:none
    linkStyle 14 stroke:#000,stroke-width:1px,stroke-dasharray: 5 5,fill:none
    linkStyle 15 stroke:#000,stroke-width:1px,stroke-dasharray: 5 5,fill:none
    linkStyle 16 stroke:#000,stroke-width:1px,stroke-dasharray: 5 5,fill:none
    linkStyle 18 stroke:#000,stroke-width:1px,stroke-dasharray: 5 5,fill:none
