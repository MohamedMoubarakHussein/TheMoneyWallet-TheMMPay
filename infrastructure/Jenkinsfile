pipeline {
    agent any

    tools {
        maven 'Maven-3.8.1'
        jdk 'JDK-17'
    }

    environment {
        SONAR_HOST_URL = 'http://localhost:9000'
       
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Build & Package All Services') {
            steps {
                script {
                    def services = ['authentication-service', 'config-service', 'discovery-service' , 'gateway' ]

                    for (svc in services) {
                        echo "Building ${svc}..."
                        dir('/projects/TheMoneyWallet-TheMMPay/Back-end' +svc) {
                            sh 'mvn clean package -DskipTests=true'
                        }
                    }

                    stash includes: '**/target/*.jar,**/Dockerfile', name: 'app-artifacts'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                     def services = ['authentication-service', 'config-service', 'discovery-service' , 'gateway' ]

                    for (svc in services) {
                        echo "Running tests for ${svc}..."
                        dir('/projects/TheMoneyWallet-TheMMPay/Back-end' +svc) {
                            sh 'mvn test'
                            publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                            sh 'mvn jacoco:report'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'target/site/jacoco',
                                reportFiles: 'index.html',
                                reportName: "${svc} - JaCoCo Coverage"
                            ])
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {

                    def services = [
                        [name: 'authentication-service', sonarKey: 'service-a-key'],
                        [name: 'config-service', sonarKey: 'service-b-key'],
                        [name: 'discovery-service', sonarKey: 'service-c-key'],
                        [name: 'gateway', sonarKey: 'service-d-key']
                    ]

                    for (svc in services) {
                        echo "Running SonarQube for ${svc.name}..."
                        dir('/projects/TheMoneyWallet-TheMMPay/Back-end' +svc.name) {
                            withSonarQubeEnv('SonarQube-Server') {
                                sh """
                                    mvn sonar:sonar \
                                    -Dsonar.projectKey=${svc.sonarKey} \
                                    -Dsonar.host.url=${SONAR_HOST_URL} \
                                    -Dsonar.login=${SONAR_AUTH_TOKEN}
                                """
                            }
                        }
                    }

                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    echo 'Building Docker images for all services...'
                    unstash 'app-artifacts'
                    def services = ['authentication-service', 'config-service', 'discovery-service' , 'gateway' ]
                    for (svc in services) {
                        def imageTag = "${svc}:${BUILD_NUMBER}"
                        sh "docker build -t ${imageTag} ./${svc}"
                    }
                }
            }
        }

        stage('Deploy to Staging with Compose') {
            steps {
                script {
                    echo 'Deploying all services to staging with Docker Compose...'

                    def services = ['authentication-service', 'config-service', 'discovery-service' , 'gateway' ]

                    def serviceCompose = services.collect { svc ->
                        """
  ${svc}:
    image: ${svc}:${BUILD_NUMBER}
    ports:
      - "${8000 + services.indexOf(svc)}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=staging
    networks:
      - staging-network
"""
                    }.join('\n')

                    def composeYaml = """
version: '3.8'
services:
${serviceCompose}
networks:
  staging-network:
    driver: bridge
"""

                    writeFile file: 'docker-compose.staging.yml', text: composeYaml

                    sh """
                        docker-compose -f docker-compose.staging.yml down || true
                        docker-compose -f docker-compose.staging.yml up -d
                        sleep 30
                        docker-compose -f docker-compose.staging.yml ps
                    """
                }
            }
        }

        stage('Integration Tests') {
            steps {
                script {
                    echo 'Running integration tests for all services...'
                 def services = ['authentication-service', 'config-service', 'discovery-service' , 'gateway' ]
                    for (svc in services) {
                        dir('/projects/TheMoneyWallet-TheMMPay/Back-end' +svc) {
                            sh """
                                mvn test -Dtest=**/*IntegrationTest \\
                                    -Dspring.profiles.active=integration \\
                                    -Dapp.url=http://localhost:${8000 + services.indexOf(svc)}
                            """
                        }
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                   def services = ['authentication-service', 'config-service', 'discovery-service' , 'gateway' ]

                    for (svc in services) {
                        def port = 8000 + services.indexOf(svc)
                        echo "Checking health of ${svc} on port ${port}..."

                        def healthCheck = sh(
                            script: """
                                curl -f http://localhost:${port}/actuator/health || exit 1
                                curl -f http://localhost:${port}/actuator/info || exit 1
                            """,
                            returnStatus: true
                        )

                        if (healthCheck != 0) {
                            sh 'docker-compose -f docker-compose.staging.yml down'
                            error "‚ùå ${svc} failed health check on port ${port}"
                        }
                    }

                    echo "‚úÖ All services passed health checks."
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning workspace...'
            cleanWs()
        }

        success {
            echo '‚úÖ Pipeline completed successfully!'
        }

        failure {
            echo '‚ùå Pipeline failed!'
        }

        unstable {
            echo '‚ö†Ô∏è Pipeline unstable.'
        }
    }
}

